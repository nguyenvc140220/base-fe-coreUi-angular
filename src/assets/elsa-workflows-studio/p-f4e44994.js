class t{constructor(){this.supportedFeatures={workflowLayout:"workflowLayout"},this.getFeatureList=()=>Object.keys(this.features),this.getUIFeatureList=()=>Object.keys(this.features).filter((t=>this.features[t].ui)),this.getFeatureConfig=t=>{const e=localStorage.getItem(`elsa.properties.${t}`),s=localStorage.getItem(`elsa.properties.${t}.enabled`),l=this.features[t];if(l)return Object.assign(Object.assign({},l),{value:null===e?l.defaultValue:e,enabled:null===s?l.enabled:"true"===s})},this.setFeatureConfig=(t,e)=>{this.features[t]&&localStorage.setItem(`elsa.properties.${t}`,e)},this.setEnableStatus=(t,e)=>{this.features[t]&&(localStorage.setItem(`elsa.properties.${t}.enabled`,`${e}`),console.log(`elsa.properties.${t}-enabled`,e))}}initialize(t){this.initialized||(this.elsaStudio=t,this.initialized=!0,this.features=t.features||{})}}const e=new t;export{t as F,e as f}