import{S as o}from"./p-f3f2f442.js";export{A as ActivityTraits,O as OrderBy,S as SyntaxNames,W as WorkflowContextFidelity,a as WorkflowPersistenceBehavior,b as WorkflowStatus,c as WorkflowTestActivityMessageStatus,g as getVersionOptionsString}from"./p-f3f2f442.js";import{E as i}from"./p-9f020d74.js";export{E as EventTypes}from"./p-9f020d74.js";export{A as ActivityIconProvider,a as activityIconProvider}from"./p-d89b071e.js";export{C as ConfirmDialogService,c as confirmDialogService}from"./p-ccbe5283.js";export{T as ToastNotificationService,t as toastNotificationService}from"./p-a472c63a.js";export{a as createElsaClient,c as createHttpClient}from"./p-4e7382b2.js";import{e as r}from"./p-d17a08e5.js";export{e as eventBus}from"./p-d17a08e5.js";export{F as FeaturesDataManager,f as featuresDataManager}from"./p-f4e44994.js";export{P as PluginManager,p as pluginManager}from"./p-137786f1.js";export{P as PropertyDisplayManager,p as propertyDisplayManager}from"./p-6aecc542.js";export{M as MonacoEditorDialogService,m as monacoEditorDialogService}from"./p-51b719ea.js";import{H as n}from"./p-f1ec68ec.js";import"./p-a3b5bd35.js";import{h as l}from"./p-6f3ac5fa.js";import"./p-82db2ff5.js";import"./p-949334ec.js";import{a as h}from"./p-e0c1fede.js";import{P as w}from"./p-88678d9c.js";export{s as DashboardState}from"./p-e5205878.js";export{d as DashboardTunnel}from"./p-96c5f56a.js";import"./p-ee0b9025.js";import"./p-80de33dc.js";import"./p-83f217d4.js";const u={ConnectionCreated:"connection-created"};class j{constructor(){r.on(i.ActivityDesignDisplaying,this.onActivityDisplaying),r.on(i.Dashboard.Appearing,this.onLoadingMenu)}onActivityDisplaying(t){const s=t.activityModel;if(!s.type.endsWith("Webhook"))return;const a=(s.properties||[]).find((t=>"Path"==t.name))||{name:"Path",expressions:{Literal:"",syntax:o.Literal}},e=l(a.expressions[a.syntax||o.Literal]);t.bodyDisplay=`<p>${e}</p>`}onLoadingMenu(t){t.data.menuItems=[...t.data.menuItems,["webhook-definitions","Webhook Definitions"]],t.data.routes=[...t.data.routes,["webhook-definitions","elsa-studio-webhook-definitions-list",!0],["webhook-definitions/:id","elsa-studio-webhook-definitions-edit",!1]]}}let y=null,v=null;class x{constructor(t){this.serverUrl=t.serverUrl,r.on(i.WorkflowRegistryLoadingColumns,this.onLoadingColumns),r.on(i.WorkflowRegistryUpdating,this.onUpdating)}onLoadingColumns(t){t.data={headers:[["Enabled"]],hasContextItems:!0}}async onUpdating(t){const s=await async function(t){if(v)return v;const s=await function(t){if(y)return y;const s={baseURL:t};r.emit(i.HttpClientConfigCreated,this,{config:s});const a=h.create(s),e=new n(a);return r.emit(i.HttpClientCreated,this,{service:e,httpClient:a}),y=a}(t);return v={workflowSettingsApi:{list:async()=>(await s.get("v1/workflow-settings")).data,save:async t=>(await s.post("v1/workflow-settings",t)).data,delete:async t=>{await s.delete(`v1/workflow-settings/${t}`)}}},v}(this.serverUrl),a=(await s.workflowSettingsApi.list()).find((s=>s.workflowBlueprintId==t.params[0]&&s.key==t.params[1]));null!=a&&await s.workflowSettingsApi.delete(a.id);const e={workflowBlueprintId:t.params[0],key:t.params[1],value:t.params[2]};await s.workflowSettingsApi.save(e),await r.emit(i.WorkflowRegistryUpdated,this)}}class k{constructor(t){this.initialize=async()=>{const t=this.options,{domain:s}=t;if(!s||0==s.trim().length)return;if(this.auth0=await w(t),await this.auth0.isAuthenticated())return;if(window.location.search.includes("code="))try{return await this.auth0.handleRedirectCallback(),void window.history.replaceState({},document.title,"/")}catch(t){return void console.log("Error parsing redirect:",t)}const a={redirect_uri:window.location.origin};await this.auth0.loginWithRedirect(a)},this.configureAuthMiddleware=async t=>{const s=this.auth0;t.service.register({async onRequest(t){const a=await s.getTokenSilently();return a&&(t.headers=Object.assign(Object.assign({},t.headers),{Authorization:`Bearer ${a}`})),t}})},this.options=t,r.on(i.Root.Initializing,this.initialize),r.on(i.HttpClientCreated,this.configureAuthMiddleware)}}class D{constructor(){r.on(i.ActivityDesignDisplaying,this.onActivityDisplaying),r.on(i.Dashboard.Appearing,this.onLoadingMenu)}onActivityDisplaying(t){const s=t.activityModel;if(!s.type.endsWith("Manager"))return;const a=(s.properties||[]).find((t=>"Path"==t.name))||{name:"Path",expressions:{Literal:"",syntax:o.Literal}},e=l(a.expressions[a.syntax||o.Literal]);t.bodyDisplay=`<p>${e}</p>`}onLoadingMenu(t){t.data.menuItems=[...t.data.menuItems,["credential-manager","Credential Manager"]],t.data.routes=[...t.data.routes,["credential-manager","elsa-credential-manager-items-list",!0]]}}export{k as Auth0Plugin,D as CredentialManagerPlugin,u as FlowchartEvents,j as WebhooksPlugin,x as WorkflowSettingsPlugin}